/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,3],$V1=[1,24],$V2=[1,25],$V3=[1,9],$V4=[1,14],$V5=[1,28],$V6=[1,21],$V7=[1,22],$V8=[1,23],$V9=[1,26],$Va=[1,32],$Vb=[1,33],$Vc=[1,34],$Vd=[1,35],$Ve=[1,36],$Vf=[1,37],$Vg=[1,38],$Vh=[1,39],$Vi=[1,40],$Vj=[1,41],$Vk=[1,42],$Vl=[1,43],$Vm=[5,9,10,13,20,21,32,33,34,35,44,48,54,55,56,61,63,69,108,109,110,111,112],$Vn=[9,10],$Vo=[1,59],$Vp=[1,68],$Vq=[1,55],$Vr=[1,56],$Vs=[1,58],$Vt=[1,60],$Vu=[1,61],$Vv=[1,62],$Vw=[1,63],$Vx=[1,66],$Vy=[1,67],$Vz=[1,72],$VA=[1,74],$VB=[1,77],$VC=[1,76],$VD=[1,82],$VE=[1,83],$VF=[1,81],$VG=[1,80],$VH=[9,10,23],$VI=[1,90],$VJ=[21,23,38,65],$VK=[9,10,23,40,66,80],$VL=[9,10,23,40,66,79,80,81],$VM=[1,97],$VN=[9,10,23,40,66,79,80,81,83],$VO=[1,98],$VP=[1,99],$VQ=[1,100],$VR=[1,101],$VS=[1,102],$VT=[1,103],$VU=[9,10,23,40,66,79,80,81,83,85,87,88,89,90,91],$VV=[1,104],$VW=[1,105],$VX=[9,10,23,40,59,60,66,79,80,81,83,85,87,88,89,90,91],$VY=[1,106],$VZ=[1,107],$V_=[1,108],$V$=[9,10,23,40,59,60,66,79,80,81,83,85,87,88,89,90,91,93,95,96],$V01=[9,10,23,40,59,60,66,79,80,81,83,85,87,88,89,90,91,93,95,96,98],$V11=[1,137],$V21=[1,192],$V31=[1,193],$V41=[1,199],$V51=[23,40,66],$V61=[9,10,23,39,40,59,60,66,79,80,81,83,85,87,88,89,90,91,93,95,96,98],$V71=[1,214],$V81=[23,40],$V91=[48,61,63,108,109,110,111,112],$Va1=[40,66],$Vb1=[9,10,50,53];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"programa":3,"sentencias":4,"EOF":5,"sentencia":6,"instruccion":7,"separador":8,"NEWLINE":9,";":10,"declaracion":11,"asignacion":12,"IMPRIMIR":13,"expresion":14,"NL":15,"sentencia_condicional":16,"ciclo":17,"procedimiento":18,"funcion":19,"EJECUTAR":20,"ID":21,"(":22,")":23,"lista_valores":24,"acceso_atributo":25,"declaracion_vector_tipo1":26,"declaracion_vector_tipo2":27,"def_objeto":28,"ing_objeto":29,"def_metodo_objeto":30,"declaracion_objeto_simple":31,"DETENER":32,"CONTINUAR":33,"RETORNAR":34,"INGRESAR":35,"COMO":36,"tipo":37,"CONVALOR":38,"=":39,",":40,"ASIGNAR":41,"acceso_vector":42,"actualizacion":43,"SI":44,"bloque":45,"condicional_extra":46,"{":47,"}":48,"lista_o_si":49,"DE":50,"LO":51,"CONTRARIO":52,"O":53,"PARA":54,"MIENTRAS":55,"HACER":56,"HASTA":57,"QUE":58,"+":59,"-":60,"PROCEDIMIENTO":61,"lista_parametros":62,"FUNCION":63,"parametro":64,"[":65,"]":66,"VECTOR":67,"lista_valores_filas":68,"OBJETO":69,"lista_miembros":70,"miembro":71,"atributo":72,"metodo":73,"CON":74,"METODO":75,".":76,"expresion_ternaria":77,"expresion_logica_or":78,"?":79,":":80,"||":81,"expresion_logica_and":82,"&&":83,"expresion_relacional":84,"==":85,"expresion_aditiva":86,"!=":87,"<":88,"<=":89,">":90,">=":91,"expresion_multiplicativa":92,"*":93,"expresion_exponencial":94,"/":95,"%":96,"expresion_unaria":97,"^":98,"!":99,"expresion_atomica":100,"NUMERO":101,"CADENA":102,"CARACTER":103,"VERDADERO":104,"FALSO":105,"TOLOWER":106,"TOUPPER":107,"TIPO_ENTERO":108,"TIPO_DECIMAL":109,"TIPO_CADENA":110,"TIPO_BOOLEANO":111,"TIPO_CARACTER":112,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"NEWLINE",10:";",13:"IMPRIMIR",15:"NL",20:"EJECUTAR",21:"ID",22:"(",23:")",32:"DETENER",33:"CONTINUAR",34:"RETORNAR",35:"INGRESAR",36:"COMO",38:"CONVALOR",39:"=",40:",",41:"ASIGNAR",44:"SI",47:"{",48:"}",50:"DE",51:"LO",52:"CONTRARIO",53:"O",54:"PARA",55:"MIENTRAS",56:"HACER",57:"HASTA",58:"QUE",59:"+",60:"-",61:"PROCEDIMIENTO",63:"FUNCION",65:"[",66:"]",67:"VECTOR",69:"OBJETO",74:"CON",75:"METODO",76:".",79:"?",80:":",81:"||",83:"&&",85:"==",87:"!=",88:"<",89:"<=",90:">",91:">=",93:"*",95:"/",96:"%",98:"^",99:"!",101:"NUMERO",102:"CADENA",103:"CARACTER",104:"VERDADERO",105:"FALSO",106:"TOLOWER",107:"TOUPPER",108:"TIPO_ENTERO",109:"TIPO_DECIMAL",110:"TIPO_CADENA",111:"TIPO_BOOLEANO",112:"TIPO_CARACTER"},
productions_: [0,[3,2],[4,2],[4,0],[6,2],[6,1],[8,1],[8,1],[7,1],[7,1],[7,2],[7,3],[7,1],[7,1],[7,1],[7,1],[7,4],[7,5],[7,4],[7,5],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,2],[11,6],[11,4],[11,4],[31,2],[24,3],[24,1],[12,3],[12,3],[12,3],[12,3],[12,1],[16,6],[45,3],[46,5],[46,4],[46,1],[46,0],[49,7],[49,6],[17,9],[17,9],[17,5],[17,7],[43,3],[43,3],[18,5],[18,6],[19,6],[19,7],[62,3],[62,1],[64,2],[64,4],[26,10],[26,15],[27,8],[27,10],[68,5],[68,3],[42,4],[42,7],[28,5],[70,2],[70,1],[71,2],[71,1],[72,2],[73,5],[73,6],[73,6],[73,7],[29,8],[30,7],[30,8],[25,3],[14,1],[77,5],[77,1],[78,3],[78,1],[82,3],[82,1],[84,3],[84,3],[84,3],[84,3],[84,3],[84,3],[84,1],[86,3],[86,3],[86,1],[92,3],[92,3],[92,3],[92,1],[94,3],[94,1],[97,2],[97,2],[97,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,4],[100,4],[100,4],[100,3],[37,1],[37,1],[37,1],[37,1],[37,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
            console.log("An√°lisis completado exitosamente");
            return $$[$0-1]; 
        
break;
case 2:
 
            if ($$[$0] !== null && $$[$0] !== undefined) {
                this.$ = $$[$0-1].concat([$$[$0]]); 
            } else {
                this.$ = $$[$0-1];
            }
        
break;
case 3:
 this.$ = []; 
break;
case 4: case 122:
 this.$ = $$[$0-1]; 
break;
case 5:
 this.$ = null; 
break;
case 8: case 9: case 12: case 13: case 14: case 15: case 20: case 21: case 22: case 23: case 24: case 25: case 40: case 75: case 117: case 118:
 this.$ = $$[$0]; 
break;
case 10:
 this.$ = { tipo: 'IMPRIMIR', valor: $$[$0], loc: this.yylloc }; 
break;
case 11:
 this.$ = { tipo: 'IMPRIMIR_NL', valor: $$[$0], loc: this.yylloc }; 
break;
case 16:
 this.$ = { tipo: 'LLAMAR_PROCEDIMIENTO', id: $$[$0-2], argumentos: [], loc: this.yylloc }; 
break;
case 17:
 this.$ = { tipo: 'LLAMAR_PROCEDIMIENTO', id: $$[$0-3], argumentos: $$[$0-1], loc: this.yylloc }; 
break;
case 18:
 this.$ = { tipo: 'LLAMAR_METODO', objeto: $$[$0-2].objeto, metodo: $$[$0-2].atributo, argumentos: [], loc: this.yylloc }; 
break;
case 19:
 this.$ = { tipo: 'LLAMAR_METODO', objeto: $$[$0-3].objeto, metodo: $$[$0-3].atributo, argumentos: $$[$0-1], loc: this.yylloc }; 
break;
case 26:
 this.$ = { tipo: 'DETENER', loc: this.yylloc }; 
break;
case 27:
 this.$ = { tipo: 'CONTINUAR', loc: this.yylloc }; 
break;
case 28:
 this.$ = { tipo: 'RETORNAR', valor: null, loc: this.yylloc }; 
break;
case 29:
 this.$ = { tipo: 'RETORNAR', valor: $$[$0], loc: this.yylloc }; 
break;
case 30:
 this.$ = { tipo: 'DECLARACION', id: $$[$0-4], tipoDato: $$[$0-2], valor: $$[$0], loc: this.yylloc }; 
break;
case 31: case 32:
 this.$ = { tipo: 'DECLARACION', id: $$[$0-2], tipoDato: $$[$0-3], valor: $$[$0], loc: this.yylloc }; 
break;
case 33:
 this.$ = { tipo: 'DECLARACION_OBJETO', tipoObjeto: $$[$0-1], id: $$[$0], loc: this.yylloc }; 
break;
case 34: case 59:
 this.$ = $$[$0-2].concat([$$[$0]]); 
break;
case 35: case 60: case 73:
 this.$ = [$$[$0]]; 
break;
case 36: case 37:
 this.$ = { tipo: 'ASIGNACION', id: $$[$0-2], valor: $$[$0], loc: this.yylloc }; 
break;
case 38:
 this.$ = { tipo: 'ASIGNACION_ATRIBUTO', objeto: $$[$0-2].objeto, atributo: $$[$0-2].atributo, valor: $$[$0], loc: this.yylloc }; 
break;
case 39:
 this.$ = { tipo: 'ASIGNACION_VECTOR', vector: $$[$0-2].id, indices: $$[$0-2].indices, valor: $$[$0], loc: this.yylloc }; 
break;
case 41:
 this.$ = { tipo: 'SI', condicion: $$[$0-3], sentencias: $$[$0-1].sentencias, oSi: $$[$0].oSi, contrario: $$[$0].contrario, loc: this.yylloc }; 
break;
case 42:
 this.$ = { sentencias: $$[$0-1], loc: this.yylloc }; 
break;
case 43:
 this.$ = { oSi: $$[$0-4], contrario: $$[$0-1].sentencias }; 
break;
case 44:
 this.$ = { oSi: [], contrario: $$[$0-1].sentencias }; 
break;
case 45:
 this.$ = { oSi: $$[$0], contrario: null }; 
break;
case 46:
 this.$ = { oSi: [], contrario: null }; 
break;
case 47:
 this.$ = $$[$0-6].concat([{ condicion: $$[$0-2], sentencias: $$[$0].sentencias, loc: this.yylloc }]); 
break;
case 48:
 this.$ = [{ condicion: $$[$0-2], sentencias: $$[$0].sentencias, loc: this.yylloc }]; 
break;
case 49: case 50:
 this.$ = { tipo: 'PARA', inicio: $$[$0-6], condicion: $$[$0-4], actualizacion: $$[$0-2], sentencias: $$[$0].sentencias, loc: this.yylloc }; 
break;
case 51:
 this.$ = { tipo: 'MIENTRAS', condicion: $$[$0-2], sentencias: $$[$0].sentencias, loc: this.yylloc }; 
break;
case 52:
 this.$ = { tipo: 'HACER_HASTA_QUE', sentencias: $$[$0-5].sentencias, condicion: $$[$0-1], loc: this.yylloc }; 
break;
case 53:
 this.$ = { tipo: 'INCREMENTO', id: $$[$0-2], loc: this.yylloc }; 
break;
case 54:
 this.$ = { tipo: 'DECREMENTO', id: $$[$0-2], loc: this.yylloc }; 
break;
case 55:
 this.$ = { tipo: 'DEF_PROCEDIMIENTO', id: $$[$0-3], sentencias: $$[$0].sentencias, parametros: [], loc: this.yylloc }; 
break;
case 56:
 this.$ = { tipo: 'DEF_PROCEDIMIENTO', id: $$[$0-4], sentencias: $$[$0].sentencias, parametros: $$[$0-2], loc: this.yylloc }; 
break;
case 57:
 this.$ = { tipo: 'DEF_FUNCION', id: $$[$0-3], tipoRetorno: $$[$0-4], sentencias: $$[$0].sentencias, parametros: [], loc: this.yylloc }; 
break;
case 58:
 this.$ = { tipo: 'DEF_FUNCION', id: $$[$0-4], tipoRetorno: $$[$0-5], sentencias: $$[$0].sentencias, parametros: $$[$0-2], loc: this.yylloc }; 
break;
case 61:
 this.$ = { tipo: 'PARAMETRO', id: $$[$0], tipoDato: $$[$0-1], loc: this.yylloc }; 
break;
case 62:
 this.$ = { tipo: 'PARAMETRO', id: $$[$0-2], tipoDato: $$[$0-3], valor: $$[$0], loc: this.yylloc }; 
break;
case 63:
 this.$ = { tipo: 'DECLARACION_VECTOR1', id: $$[$0-6], tipoDato: $$[$0-9], tama√±o: $$[$0-1], dimensiones: 1, loc: this.yylloc }; 
break;
case 64:
 this.$ = { tipo: 'DECLARACION_VECTOR1', id: $$[$0-8], tipoDato: $$[$0-14], tama√±o1: $$[$0-4], tama√±o2: $$[$0-1], dimensiones: 2, loc: this.yylloc }; 
break;
case 65:
 this.$ = { tipo: 'DECLARACION_VECTOR2', id: $$[$0-4], tipoDato: $$[$0-7], valores: $$[$0-1], dimensiones: 1, loc: this.yylloc }; 
break;
case 66:
 this.$ = { tipo: 'DECLARACION_VECTOR2', id: $$[$0-3], tipoDato: $$[$0-9], valores: $$[$0-1], dimensiones: 2, loc: this.yylloc }; 
break;
case 67:
 this.$ = $$[$0-4].concat([$$[$0-1]]); 
break;
case 68:
 this.$ = [$$[$0-1]]; 
break;
case 69:
 this.$ = { tipo: 'ACCESO_VECTOR', id: $$[$0-3], indices: [$$[$0-1]], loc: this.yylloc }; 
break;
case 70:
 this.$ = { tipo: 'ACCESO_VECTOR', id: $$[$0-6], indices: [$$[$0-4], $$[$0-1]], loc: this.yylloc }; 
break;
case 71:
 this.$ = { tipo: 'DEF_OBJETO', id: $$[$0-3], miembros: $$[$0-1], loc: this.yylloc }; 
break;
case 72:
 this.$ = $$[$0-1].concat([$$[$0]]); 
break;
case 74:
 this.$ = { tipo: 'ATRIBUTO', id: $$[$0-1].id, tipoDato: $$[$0-1].tipo, loc: this.yylloc }; 
break;
case 76:
 this.$ = { id: $$[$0], tipo: $$[$0-1], loc: this.yylloc }; 
break;
case 77:
 this.$ = { tipo: 'METODO_OBJETO', id: $$[$0-3], tipo: 'PROCEDIMIENTO', parametros: [], sentencias: $$[$0].sentencias, loc: this.yylloc }; 
break;
case 78:
 this.$ = { tipo: 'METODO_OBJETO', id: $$[$0-4], tipo: 'PROCEDIMIENTO', parametros: $$[$0-2], sentencias: $$[$0].sentencias, loc: this.yylloc }; 
break;
case 79:
 this.$ = { tipo: 'METODO_OBJETO', id: $$[$0-3], tipo: 'FUNCION', tipoRetorno: $$[$0-4], parametros: [], sentencias: $$[$0].sentencias, loc: this.yylloc }; 
break;
case 80:
 this.$ = { tipo: 'METODO_OBJETO', id: $$[$0-4], tipo: 'FUNCION', tipoRetorno: $$[$0-5], parametros: $$[$0-2], sentencias: $$[$0].sentencias, loc: this.yylloc }; 
break;
case 81:
 this.$ = { tipo: 'INGRESAR_OBJETO', id: $$[$0-5], tipoObjeto: $$[$0-3], argumentos: $$[$0-1], loc: this.yylloc }; 
break;
case 82:
 this.$ = { tipo: 'DEF_METODO_OBJETO', objeto: $$[$0-6], id: $$[$0-3], parametros: [], sentencias: $$[$0].sentencias, loc: this.yylloc }; 
break;
case 83:
 this.$ = { tipo: 'DEF_METODO_OBJETO', objeto: $$[$0-7], id: $$[$0-4], parametros: $$[$0-2], sentencias: $$[$0].sentencias, loc: this.yylloc }; 
break;
case 84:
 this.$ = { tipo: 'ACCESO_ATRIBUTO', objeto: $$[$0-2], atributo: $$[$0], loc: this.yylloc }; 
break;
case 86:
 this.$ = { tipo: 'TERNARIO', condicion: $$[$0-4], verdadero: $$[$0-2], falso: $$[$0], loc: this.yylloc }; 
break;
case 88:
 this.$ = { tipo: 'OR', izquierda: $$[$0-2], derecha: $$[$0], loc: this.yylloc }; 
break;
case 90:
 this.$ = { tipo: 'AND', izquierda: $$[$0-2], derecha: $$[$0], loc: this.yylloc }; 
break;
case 92:
 this.$ = { tipo: 'IGUALDAD', izquierda: $$[$0-2], derecha: $$[$0], loc: this.yylloc }; 
break;
case 93:
 this.$ = { tipo: 'DESIGUALDAD', izquierda: $$[$0-2], derecha: $$[$0], loc: this.yylloc }; 
break;
case 94:
 this.$ = { tipo: 'MENOR', izquierda: $$[$0-2], derecha: $$[$0], loc: this.yylloc }; 
break;
case 95:
 this.$ = { tipo: 'MENOR_IGUAL', izquierda: $$[$0-2], derecha: $$[$0], loc: this.yylloc }; 
break;
case 96:
 this.$ = { tipo: 'MAYOR', izquierda: $$[$0-2], derecha: $$[$0], loc: this.yylloc }; 
break;
case 97:
 this.$ = { tipo: 'MAYOR_IGUAL', izquierda: $$[$0-2], derecha: $$[$0], loc: this.yylloc }; 
break;
case 99:
 this.$ = { tipo: 'SUMA', izquierda: $$[$0-2], derecha: $$[$0], loc: this.yylloc }; 
break;
case 100:
 this.$ = { tipo: 'RESTA', izquierda: $$[$0-2], derecha: $$[$0], loc: this.yylloc }; 
break;
case 102:
 this.$ = { tipo: 'MULTIPLICACION', izquierda: $$[$0-2], derecha: $$[$0], loc: this.yylloc }; 
break;
case 103:
 this.$ = { tipo: 'DIVISION', izquierda: $$[$0-2], derecha: $$[$0], loc: this.yylloc }; 
break;
case 104:
 this.$ = { tipo: 'MODULO', izquierda: $$[$0-2], derecha: $$[$0], loc: this.yylloc }; 
break;
case 106:
 this.$ = { tipo: 'POTENCIA', izquierda: $$[$0-2], derecha: $$[$0], loc: this.yylloc }; 
break;
case 108:
 this.$ = { tipo: 'NEGACION_UNARIA', expresion: $$[$0], loc: this.yylloc }; 
break;
case 109:
 this.$ = { tipo: 'NOT', expresion: $$[$0], loc: this.yylloc }; 
break;
case 111:
 this.$ = { tipo: 'NUMERO', valor: Number($$[$0]), loc: this.yylloc }; 
break;
case 112:
 this.$ = { tipo: 'ID', nombre: $$[$0], loc: this.yylloc }; 
break;
case 113:
 this.$ = { tipo: 'CADENA', valor: $$[$0].slice(1, -1), loc: this.yylloc }; 
break;
case 114:
 this.$ = { tipo: 'CARACTER', valor: $$[$0].slice(1, -1), loc: this.yylloc }; 
break;
case 115:
 this.$ = { tipo: 'BOOLEANO', valor: true, loc: this.yylloc }; 
break;
case 116:
 this.$ = { tipo: 'BOOLEANO', valor: false, loc: this.yylloc }; 
break;
case 119:
 this.$ = { tipo: 'TOLOWER', expresion: $$[$0-1], loc: this.yylloc }; 
break;
case 120:
 this.$ = { tipo: 'TOUPPER', expresion: $$[$0-1], loc: this.yylloc }; 
break;
case 121:
 this.$ = { tipo: 'CASTEO', tipoDato: $$[$0-2], expresion: $$[$0], loc: this.yylloc }; 
break;
case 123:
 this.$ = 'entero'; 
break;
case 124:
 this.$ = 'decimal'; 
break;
case 125:
 this.$ = 'cadena'; 
break;
case 126:
 this.$ = 'booleano'; 
break;
case 127:
 this.$ = 'caracter'; 
break;
}
},
table: [o([5,9,10,13,20,21,32,33,34,35,44,54,55,56,61,63,69,108,109,110,111,112],$V0,{3:1,4:2}),{1:[3]},{5:[1,3],6:4,7:5,8:6,9:$V1,10:$V2,11:7,12:8,13:$V3,16:10,17:11,18:12,19:13,20:$V4,21:$V5,25:29,26:15,27:16,28:17,29:18,30:19,31:20,32:$V6,33:$V7,34:$V8,35:$V9,37:27,42:30,43:31,44:$Va,54:$Vb,55:$Vc,56:$Vd,61:$Ve,63:$Vf,69:$Vg,108:$Vh,109:$Vi,110:$Vj,111:$Vk,112:$Vl},{1:[2,1]},o($Vm,[2,2]),{8:44,9:$V1,10:$V2},o($Vm,[2,5]),o($Vn,[2,8]),o($Vn,[2,9]),{14:45,15:[1,46],21:$Vo,22:$Vp,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},o($Vn,[2,12]),o($Vn,[2,13]),o($Vn,[2,14]),o($Vn,[2,15]),{21:[1,69],25:70},o($Vn,[2,20]),o($Vn,[2,21]),o($Vn,[2,22]),o($Vn,[2,23]),o($Vn,[2,24]),o($Vn,[2,25]),o($Vn,[2,26]),o($Vn,[2,27]),o($Vn,[2,28],{77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,100:57,42:64,25:65,14:71,21:$Vo,22:$Vp,60:$Vq,99:$Vr,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy}),o($Vm,[2,6]),o($Vm,[2,7]),{21:$Vz,69:[1,73]},{21:$VA,65:[1,75]},{21:[1,79],39:$VB,41:$VC,59:$VD,60:$VE,65:$VF,74:[1,78],76:$VG},{39:[1,84]},{39:[1,85]},o($VH,[2,40]),{22:[1,86]},{22:[1,87]},{22:[1,88]},{45:89,47:$VI},{21:[1,91]},{37:92,108:$Vh,109:$Vi,110:$Vj,111:$Vk,112:$Vl},{21:[1,93]},o($VJ,[2,123]),o($VJ,[2,124]),o($VJ,[2,125]),o($VJ,[2,126]),o($VJ,[2,127]),o($Vm,[2,4]),o($Vn,[2,10]),{14:94,21:$Vo,22:$Vp,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},o($VK,[2,85]),o($VK,[2,87],{79:[1,95],81:[1,96]}),o($VL,[2,89],{83:$VM}),o($VN,[2,91],{85:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT}),o($VU,[2,98],{59:$VV,60:$VW}),o($VX,[2,101],{93:$VY,95:$VZ,96:$V_}),o($V$,[2,105]),o($V$,[2,107],{98:[1,109]}),{21:$Vo,22:$Vp,25:65,42:64,60:$Vq,97:110,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{21:$Vo,22:$Vp,25:65,42:64,60:$Vq,97:111,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},o($V01,[2,110]),o($V01,[2,111]),o($V01,[2,112],{65:$VF,76:$VG}),o($V01,[2,113]),o($V01,[2,114]),o($V01,[2,115]),o($V01,[2,116]),o($V01,[2,117]),o($V01,[2,118]),{22:[1,112]},{22:[1,113]},{14:115,21:$Vo,22:$Vp,25:65,37:114,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy,108:$Vh,109:$Vi,110:$Vj,111:$Vk,112:$Vl},{22:[1,116],76:$VG},{22:[1,117]},o($Vn,[2,29]),{36:[1,118]},{21:[1,119]},{38:[1,120],39:[1,121]},{66:[1,122]},{14:123,21:$Vo,22:$Vp,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{14:124,21:$Vo,22:$Vp,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{75:[1,125]},o($Vn,[2,33]),{21:[1,126]},{14:127,21:$Vo,22:$Vp,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{59:[1,128]},{60:[1,129]},{14:130,21:$Vo,22:$Vp,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{14:131,21:$Vo,22:$Vp,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{14:132,21:$Vo,22:$Vp,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{11:133,12:134,21:$V11,25:29,35:[1,135],37:136,42:30,43:31,108:$Vh,109:$Vi,110:$Vj,111:$Vk,112:$Vl},{14:138,21:$Vo,22:$Vp,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{57:[1,139]},o([9,10,13,20,21,32,33,34,35,44,48,54,55,56,61,63,69,108,109,110,111,112],$V0,{4:140}),{22:[1,141]},{21:[1,142]},{47:[1,143]},o($Vn,[2,11]),{14:144,21:$Vo,22:$Vp,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{21:$Vo,22:$Vp,25:65,42:64,60:$Vq,82:145,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{21:$Vo,22:$Vp,25:65,42:64,60:$Vq,84:146,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{21:$Vo,22:$Vp,25:65,42:64,60:$Vq,86:147,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{21:$Vo,22:$Vp,25:65,42:64,60:$Vq,86:148,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{21:$Vo,22:$Vp,25:65,42:64,60:$Vq,86:149,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{21:$Vo,22:$Vp,25:65,42:64,60:$Vq,86:150,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{21:$Vo,22:$Vp,25:65,42:64,60:$Vq,86:151,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{21:$Vo,22:$Vp,25:65,42:64,60:$Vq,86:152,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{21:$Vo,22:$Vp,25:65,42:64,60:$Vq,92:153,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{21:$Vo,22:$Vp,25:65,42:64,60:$Vq,92:154,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{21:$Vo,22:$Vp,25:65,42:64,60:$Vq,94:155,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{21:$Vo,22:$Vp,25:65,42:64,60:$Vq,94:156,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{21:$Vo,22:$Vp,25:65,42:64,60:$Vq,94:157,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{21:$Vo,22:$Vp,25:65,42:64,60:$Vq,94:158,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},o($V01,[2,108]),o($V01,[2,109]),{14:159,21:$Vo,22:$Vp,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{14:160,21:$Vo,22:$Vp,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{23:[1,161]},{23:[1,162]},{14:165,21:$Vo,22:$Vp,23:[1,163],24:164,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{14:165,21:$Vo,22:$Vp,23:[1,166],24:167,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{37:168,108:$Vh,109:$Vi,110:$Vj,111:$Vk,112:$Vl},{41:[1,169]},{14:170,21:$Vo,22:$Vp,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{14:171,21:$Vo,22:$Vp,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{21:[1,172],65:[1,173]},o($VH,[2,36]),o($VH,[2,37]),{21:[1,174]},o([9,10,22,23,39,40,59,60,66,79,80,81,83,85,87,88,89,90,91,93,95,96,98],[2,84]),{66:[1,175]},o($VH,[2,53]),o($VH,[2,54]),o($VH,[2,38]),o($VH,[2,39]),{23:[1,176]},{10:[1,177]},{10:[1,178]},{21:$Vz},{21:$VA},{39:$VB,41:$VC,59:$VD,60:$VE,65:$VF,76:$VG},{23:[1,179]},{58:[1,180]},{6:4,7:5,8:6,9:$V1,10:$V2,11:7,12:8,13:$V3,16:10,17:11,18:12,19:13,20:$V4,21:$V5,25:29,26:15,27:16,28:17,29:18,30:19,31:20,32:$V6,33:$V7,34:$V8,35:$V9,37:27,42:30,43:31,44:$Va,48:[1,181],54:$Vb,55:$Vc,56:$Vd,61:$Ve,63:$Vf,69:$Vg,108:$Vh,109:$Vi,110:$Vj,111:$Vk,112:$Vl},{23:[1,182],37:185,62:183,64:184,108:$Vh,109:$Vi,110:$Vj,111:$Vk,112:$Vl},{22:[1,186]},{37:191,61:$V21,63:$V31,70:187,71:188,72:189,73:190,108:$Vh,109:$Vi,110:$Vj,111:$Vk,112:$Vl},{80:[1,194]},o($VL,[2,88],{83:$VM}),o($VN,[2,90],{85:$VO,87:$VP,88:$VQ,89:$VR,90:$VS,91:$VT}),o($VU,[2,92],{59:$VV,60:$VW}),o($VU,[2,93],{59:$VV,60:$VW}),o($VU,[2,94],{59:$VV,60:$VW}),o($VU,[2,95],{59:$VV,60:$VW}),o($VU,[2,96],{59:$VV,60:$VW}),o($VU,[2,97],{59:$VV,60:$VW}),o($VX,[2,99],{93:$VY,95:$VZ,96:$V_}),o($VX,[2,100],{93:$VY,95:$VZ,96:$V_}),o($V$,[2,102]),o($V$,[2,103]),o($V$,[2,104]),o($V$,[2,106]),{23:[1,195]},{23:[1,196]},{21:$Vo,22:$Vp,25:65,42:64,60:$Vq,97:197,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},o($V01,[2,122]),o($Vn,[2,16]),{23:[1,198],40:$V41},o($V51,[2,35]),o($Vn,[2,18]),{23:[1,200],40:$V41},{38:[1,201]},{21:[1,202]},o($Vn,[2,31]),o($Vn,[2,32]),{39:[1,203]},{66:[1,204]},{22:[1,205]},o($V61,[2,69],{65:[1,206]}),{45:207,47:$VI},{14:208,21:$Vo,22:$Vp,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{14:209,21:$Vo,22:$Vp,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{45:210,47:$VI},{22:[1,211]},o([9,10,48,50,53,57,61,63,108,109,110,111,112],[2,42]),{45:212,47:$VI},{23:[1,213],40:$V71},o($V81,[2,60]),{21:[1,215]},{23:[1,216],37:185,62:217,64:184,108:$Vh,109:$Vi,110:$Vj,111:$Vk,112:$Vl},{37:191,48:[1,218],61:$V21,63:$V31,71:219,72:189,73:190,108:$Vh,109:$Vi,110:$Vj,111:$Vk,112:$Vl},o($V91,[2,73]),{10:[1,220]},o($V91,[2,75]),{21:[1,221]},{21:[1,222]},{37:223,108:$Vh,109:$Vi,110:$Vj,111:$Vk,112:$Vl},{14:224,21:$Vo,22:$Vp,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},o($V01,[2,119]),o($V01,[2,120]),o($V01,[2,121]),o($Vn,[2,17]),{14:225,21:$Vo,22:$Vp,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},o($Vn,[2,19]),{14:226,21:$Vo,22:$Vp,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{22:[1,227]},{65:[1,229],67:[1,228]},{21:[1,230]},{23:[1,231],37:185,62:232,64:184,108:$Vh,109:$Vi,110:$Vj,111:$Vk,112:$Vl},{14:233,21:$Vo,22:$Vp,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},o($Vn,[2,46],{46:234,49:235,50:[1,236],53:[1,237]}),{10:[1,238]},{10:[1,239]},o($Vn,[2,51]),{14:240,21:$Vo,22:$Vp,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},o($Vn,[2,55]),{45:241,47:$VI},{37:185,64:242,108:$Vh,109:$Vi,110:$Vj,111:$Vk,112:$Vl},o($V81,[2,61],{39:[1,243]}),{45:244,47:$VI},{23:[1,245],40:$V71},o($Vn,[2,71]),o($V91,[2,72]),o($V91,[2,74]),{10:[2,76]},{22:[1,246]},{21:[1,247]},o($VK,[2,86]),o($V51,[2,34]),o($Vn,[2,30]),{14:165,21:$Vo,22:$Vp,24:248,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{37:249,108:$Vh,109:$Vi,110:$Vj,111:$Vk,112:$Vl},{14:165,21:$Vo,22:$Vp,24:250,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{39:[1,251]},{45:252,47:$VI},{23:[1,253],40:$V71},{66:[1,254]},o($Vn,[2,41]),o($Vn,[2,45],{50:[1,255],53:[1,256]}),{51:[1,257]},{44:[1,258]},{12:259,21:$V11,25:29,42:30,43:31},{12:260,21:$V11,25:29,42:30,43:31},{23:[1,261]},o($Vn,[2,56]),o($V81,[2,59]),{14:262,21:$Vo,22:$Vp,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},o($Vn,[2,57]),{45:263,47:$VI},{23:[1,264],37:185,62:265,64:184,108:$Vh,109:$Vi,110:$Vj,111:$Vk,112:$Vl},{22:[1,266]},{23:[1,267],40:$V41},{65:[1,268]},{40:$V41,66:[1,269]},{65:[1,271],67:[1,270]},o($Vn,[2,82]),{45:272,47:$VI},o($V61,[2,70]),{51:[1,273]},{44:[1,274]},{52:[1,275]},{22:[1,276]},{23:[1,277]},{23:[1,278]},o($Vn,[2,52]),o($V81,[2,62]),o($Vn,[2,58]),{45:279,47:$VI},{23:[1,280],40:$V71},{23:[1,281],37:185,62:282,64:184,108:$Vh,109:$Vi,110:$Vj,111:$Vk,112:$Vl},o($Vn,[2,81]),{14:283,21:$Vo,22:$Vp,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},o($Vn,[2,65]),{37:284,108:$Vh,109:$Vi,110:$Vj,111:$Vk,112:$Vl},{65:[1,286],68:285},o($Vn,[2,83]),{52:[1,287]},{22:[1,288]},{45:289,47:$VI},{14:290,21:$Vo,22:$Vp,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{45:291,47:$VI},{45:292,47:$VI},o($V91,[2,77]),{45:293,47:$VI},{45:294,47:$VI},{23:[1,295],40:$V71},{66:[1,296]},{65:[1,297]},{40:[1,299],66:[1,298]},{14:165,21:$Vo,22:$Vp,24:300,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},{45:301,47:$VI},{14:302,21:$Vo,22:$Vp,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},o($Vn,[2,44]),{23:[1,303]},o($Vn,[2,49]),o($Vn,[2,50]),o($V91,[2,78]),o($V91,[2,79]),{45:304,47:$VI},o($Vn,[2,63]),{14:305,21:$Vo,22:$Vp,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},o($Vn,[2,66]),{65:[1,306]},{40:$V41,66:[1,307]},o($Vn,[2,43]),{23:[1,308]},{45:309,47:$VI},o($V91,[2,80]),{66:[1,310]},{14:165,21:$Vo,22:$Vp,24:311,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},o($Va1,[2,68]),{45:312,47:$VI},o($Vb1,[2,48]),{65:[1,313]},{40:$V41,66:[1,314]},o($Vb1,[2,47]),{14:315,21:$Vo,22:$Vp,25:65,42:64,60:$Vq,77:47,78:48,82:49,84:50,86:51,92:52,94:53,97:54,99:$Vr,100:57,101:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:$Vx,107:$Vy},o($Va1,[2,67]),{66:[1,316]},o($Vn,[2,64])],
defaultActions: {3:[2,1],221:[2,76]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip horizontal whitespace */
break;
case 1:/* skip comentarios de l√≠nea */
break;
case 2:/* skip comentarios multil√≠nea */
break;
case 3:return 35;
break;
case 4:return 36;
break;
case 5:return 38;
break;
case 6:return 108;
break;
case 7:return 109;
break;
case 8:return 112;
break;
case 9:return 110;
break;
case 10:return 111;
break;
case 11:return 13;
break;
case 12:return 15;
break;
case 13:return 104;  // Cambiado a may√∫scula
break;
case 14:return 105;      // Cambiado a may√∫scula
break;
case 15:return 44;
break;
case 16:return 53;
break;
case 17:return 50;
break;
case 18:return 51;
break;
case 19:return 52;
break;
case 20:return 55;
break;
case 21:return 54;
break;
case 22:return 56;
break;
case 23:return 57;
break;
case 24:return 58;
break;
case 25:return 61;
break;
case 26:return 63;
break;
case 27:return 34;
break;
case 28:return 20;
break;
case 29:return 67;
break;
case 30:return 69;
break;
case 31:return 74;
break;
case 32:return 75;
break;
case 33:return 32;
break;
case 34:return 33;
break;
case 35:return 106;
break;
case 36:return 107;
break;
case 37:return 101;
break;
case 38:return 102;
break;
case 39:return 103;
break;
case 40:return 21;
break;
case 41:return 41;
break;
case 42:return 59;
break;
case 43:return 60;
break;
case 44:return 93;
break;
case 45:return 95;
break;
case 46:return 98;
break;
case 47:return 96;
break;
case 48:return 85;
break;
case 49:return 87;
break;
case 50:return 89;
break;
case 51:return 91;
break;
case 52:return 88;
break;
case 53:return 90;
break;
case 54:return 81;
break;
case 55:return 83;
break;
case 56:return 99;
break;
case 57:return 39;
break;
case 58:return 76;
break;
case 59:return 79;
break;
case 60:return 80;
break;
case 61:return 22;
break;
case 62:return 23;
break;
case 63:return 65;
break;
case 64:return 66;
break;
case 65:return 47;
break;
case 66:return 48;
break;
case 67:return 40;
break;
case 68:return 10;
break;
case 69:return 9;
break;
case 70:return 5;
break;
case 71:
    console.error(`Car√°cter no reconocido: '${yy_.yytext}'`);
    return 'INVALIDO';

break;
}
},
rules: [/^(?:[ \t\r]+)/,/^(?:\/\/[^\n]*)/,/^(?:\/\*([^*]|\*+[^/*])*\*+\/)/,/^(?:ingresar\b)/,/^(?:como\b)/,/^(?:con valor\b)/,/^(?:entero\b)/,/^(?:decimal\b)/,/^(?:caracter\b)/,/^(?:cadena\b)/,/^(?:booleano\b)/,/^(?:imprimir\b)/,/^(?:nl\b)/,/^(?:Verdadero\b)/,/^(?:Falso\b)/,/^(?:si\b)/,/^(?:o\b)/,/^(?:de\b)/,/^(?:lo\b)/,/^(?:contrario\b)/,/^(?:mientras\b)/,/^(?:para\b)/,/^(?:hacer\b)/,/^(?:hasta\b)/,/^(?:que\b)/,/^(?:procedimiento\b)/,/^(?:funcion\b)/,/^(?:retornar\b)/,/^(?:ejecutar\b)/,/^(?:vector\b)/,/^(?:objeto\b)/,/^(?:con\b)/,/^(?:metodo\b)/,/^(?:detener\b)/,/^(?:continuar\b)/,/^(?:tolower\b)/,/^(?:toupper\b)/,/^(?:[0-9]+(\.[0-9]+)?)/,/^(?:"([^"\\]|\\.)*")/,/^(?:'([^'\\]|\\.)*')/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:->)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:==)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:=)/,/^(?:\.)/,/^(?:\?)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:;)/,/^(?:\n)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}