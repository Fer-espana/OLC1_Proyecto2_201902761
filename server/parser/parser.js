/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,3],$V1=[1,23],$V2=[1,24],$V3=[1,9],$V4=[1,14],$V5=[1,27],$V6=[1,20],$V7=[1,21],$V8=[1,22],$V9=[1,25],$Va=[1,31],$Vb=[1,32],$Vc=[1,33],$Vd=[1,34],$Ve=[1,35],$Vf=[1,36],$Vg=[1,37],$Vh=[1,38],$Vi=[1,39],$Vj=[1,40],$Vk=[1,41],$Vl=[1,42],$Vm=[5,9,10,13,20,21,31,32,33,34,43,45,51,52,53,58,60,66,103,104,105,106,107],$Vn=[9,10],$Vo=[1,58],$Vp=[1,67],$Vq=[1,54],$Vr=[1,55],$Vs=[1,57],$Vt=[1,59],$Vu=[1,60],$Vv=[1,61],$Vw=[1,62],$Vx=[1,65],$Vy=[1,66],$Vz=[1,71],$VA=[1,73],$VB=[1,76],$VC=[1,75],$VD=[1,80],$VE=[1,81],$VF=[1,79],$VG=[1,78],$VH=[9,10,23],$VI=[21,23,37,62],$VJ=[9,10,23,39,63,75],$VK=[9,10,23,39,63,74,75,76],$VL=[1,94],$VM=[9,10,23,39,63,74,75,76,78],$VN=[1,95],$VO=[1,96],$VP=[1,97],$VQ=[1,98],$VR=[1,99],$VS=[1,100],$VT=[9,10,23,39,63,74,75,76,78,80,82,83,84,85,86],$VU=[1,101],$VV=[1,102],$VW=[9,10,23,39,56,57,63,74,75,76,78,80,82,83,84,85,86],$VX=[1,103],$VY=[1,104],$VZ=[1,105],$V_=[9,10,23,39,56,57,63,74,75,76,78,80,82,83,84,85,86,88,90,91],$V$=[9,10,23,39,56,57,63,74,75,76,78,80,82,83,84,85,86,88,90,91,93],$V01=[1,134],$V11=[9,10,13,20,21,31,32,33,34,43,45,51,52,53,58,60,66,103,104,105,106,107],$V21=[1,184],$V31=[1,190],$V41=[23,39,63],$V51=[9,10,23,38,39,56,57,63,74,75,76,78,80,82,83,84,85,86,88,90,91,93],$V61=[1,205],$V71=[23,39],$V81=[21,23],$V91=[39,63],$Va1=[9,10,46,50];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"programa":3,"sentencias":4,"EOF":5,"sentencia":6,"instruccion":7,"separador":8,"NEWLINE":9,";":10,"declaracion":11,"asignacion":12,"IMPRIMIR":13,"expresion":14,"NL":15,"sentencia_condicional":16,"ciclo":17,"procedimiento":18,"funcion":19,"EJECUTAR":20,"ID":21,"(":22,")":23,"lista_valores":24,"acceso_atributo":25,"declaracion_vector_tipo1":26,"declaracion_vector_tipo2":27,"def_objeto":28,"ing_objeto":29,"def_metodo_objeto":30,"DETENER":31,"CONTINUAR":32,"RETORNAR":33,"INGRESAR":34,"COMO":35,"tipo":36,"CONVALOR":37,"=":38,",":39,"ASIGNAR":40,"acceso_vector":41,"actualizacion":42,"SI":43,"{":44,"}":45,"DE":46,"LO":47,"CONTRARIO":48,"lista_o_si":49,"O":50,"PARA":51,"MIENTRAS":52,"HACER":53,"HASTA":54,"QUE":55,"+":56,"-":57,"PROCEDIMIENTO":58,"lista_parametros":59,"FUNCION":60,"parametro":61,"[":62,"]":63,"VECTOR":64,"lista_valores_filas":65,"OBJETO":66,"lista_atributos":67,"atributo":68,"CON":69,"METODO":70,".":71,"expresion_ternaria":72,"expresion_logica_or":73,"?":74,":":75,"||":76,"expresion_logica_and":77,"&&":78,"expresion_relacional":79,"==":80,"expresion_aditiva":81,"!=":82,"<":83,"<=":84,">":85,">=":86,"expresion_multiplicativa":87,"*":88,"expresion_exponencial":89,"/":90,"%":91,"expresion_unaria":92,"^":93,"!":94,"expresion_atomica":95,"NUMERO":96,"CADENA":97,"CARACTER":98,"VERDADERO":99,"FALSO":100,"TOLOWER":101,"TOUPPER":102,"TIPO_ENTERO":103,"TIPO_DECIMAL":104,"TIPO_CADENA":105,"TIPO_BOOLEANO":106,"TIPO_CARACTER":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"NEWLINE",10:";",13:"IMPRIMIR",15:"NL",20:"EJECUTAR",21:"ID",22:"(",23:")",31:"DETENER",32:"CONTINUAR",33:"RETORNAR",34:"INGRESAR",35:"COMO",37:"CONVALOR",38:"=",39:",",40:"ASIGNAR",43:"SI",44:"{",45:"}",46:"DE",47:"LO",48:"CONTRARIO",50:"O",51:"PARA",52:"MIENTRAS",53:"HACER",54:"HASTA",55:"QUE",56:"+",57:"-",58:"PROCEDIMIENTO",60:"FUNCION",62:"[",63:"]",64:"VECTOR",66:"OBJETO",69:"CON",70:"METODO",71:".",74:"?",75:":",76:"||",78:"&&",80:"==",82:"!=",83:"<",84:"<=",85:">",86:">=",88:"*",90:"/",91:"%",93:"^",94:"!",96:"NUMERO",97:"CADENA",98:"CARACTER",99:"VERDADERO",100:"FALSO",101:"TOLOWER",102:"TOUPPER",103:"TIPO_ENTERO",104:"TIPO_DECIMAL",105:"TIPO_CADENA",106:"TIPO_BOOLEANO",107:"TIPO_CARACTER"},
productions_: [0,[3,2],[4,2],[4,0],[6,2],[6,1],[8,1],[8,1],[7,1],[7,1],[7,2],[7,3],[7,1],[7,1],[7,1],[7,1],[7,4],[7,5],[7,4],[7,5],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,2],[11,6],[11,4],[11,4],[24,3],[24,1],[12,3],[12,3],[12,3],[12,3],[12,1],[16,7],[16,13],[16,8],[16,14],[49,9],[49,8],[17,11],[17,11],[17,7],[17,9],[42,3],[42,3],[18,7],[18,8],[19,8],[19,9],[59,3],[59,1],[61,2],[61,4],[26,10],[26,15],[27,8],[27,10],[65,5],[65,3],[41,4],[41,7],[28,5],[67,2],[67,1],[68,2],[30,9],[30,10],[29,8],[25,3],[14,1],[72,5],[72,1],[73,3],[73,1],[77,3],[77,1],[79,3],[79,3],[79,3],[79,3],[79,3],[79,3],[79,1],[81,3],[81,3],[81,1],[87,3],[87,3],[87,3],[87,1],[89,3],[89,1],[92,2],[92,2],[92,1],[95,1],[95,1],[95,1],[95,1],[95,1],[95,1],[95,1],[95,1],[95,4],[95,4],[95,4],[95,3],[36,1],[36,1],[36,1],[36,1],[36,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
            console.log("An√°lisis completado exitosamente");
            return $$[$0-1]; 
        
break;
case 2:
 
            if ($$[$0] !== null && $$[$0] !== undefined) {
                this.$ = $$[$0-1].concat([$$[$0]]); 
            } else {
                this.$ = $$[$0-1];
            }
        
break;
case 3:
 this.$ = []; 
break;
case 4: case 112:
 this.$ = $$[$0-1]; 
break;
case 5:
 this.$ = null; 
break;
case 8: case 9: case 12: case 13: case 14: case 15: case 20: case 21: case 22: case 23: case 24: case 38: case 107: case 108:
 this.$ = $$[$0]; 
break;
case 10:
 this.$ = { tipo: 'IMPRIMIR', valor: $$[$0], loc: this.yylloc }; 
break;
case 11:
 this.$ = { tipo: 'IMPRIMIR_NL', valor: $$[$0], loc: this.yylloc }; 
break;
case 16:
 this.$ = { tipo: 'LLAMAR_PROCEDIMIENTO', id: $$[$0-2], argumentos: [], loc: this.yylloc }; 
break;
case 17:
 this.$ = { tipo: 'LLAMAR_PROCEDIMIENTO', id: $$[$0-3], argumentos: $$[$0-1], loc: this.yylloc }; 
break;
case 18:
 this.$ = { tipo: 'LLAMAR_METODO', objeto: $$[$0-2].objeto, metodo: $$[$0-2].atributo, argumentos: [], loc: this.yylloc }; 
break;
case 19:
 this.$ = { tipo: 'LLAMAR_METODO', objeto: $$[$0-3].objeto, metodo: $$[$0-3].atributo, argumentos: $$[$0-1], loc: this.yylloc }; 
break;
case 25:
 this.$ = { tipo: 'DETENER', loc: this.yylloc }; 
break;
case 26:
 this.$ = { tipo: 'CONTINUAR', loc: this.yylloc }; 
break;
case 27:
 this.$ = { tipo: 'RETORNAR', valor: null, loc: this.yylloc }; 
break;
case 28:
 this.$ = { tipo: 'RETORNAR', valor: $$[$0], loc: this.yylloc }; 
break;
case 29:
 this.$ = { tipo: 'DECLARACION', id: $$[$0-4], tipoDato: $$[$0-2], valor: $$[$0], loc: this.yylloc }; 
break;
case 30: case 31:
 this.$ = { tipo: 'DECLARACION', id: $$[$0-2], tipoDato: $$[$0-3], valor: $$[$0], loc: this.yylloc }; 
break;
case 32: case 55:
 this.$ = $$[$0-2].concat([$$[$0]]); 
break;
case 33: case 56: case 69:
 this.$ = [$$[$0]]; 
break;
case 34: case 35:
 this.$ = { tipo: 'ASIGNACION', id: $$[$0-2], valor: $$[$0], loc: this.yylloc }; 
break;
case 36:
 this.$ = { tipo: 'ASIGNACION_ATRIBUTO', objeto: $$[$0-2].objeto, atributo: $$[$0-2].atributo, valor: $$[$0], loc: this.yylloc }; 
break;
case 37:
 this.$ = { tipo: 'ASIGNACION_VECTOR', vector: $$[$0-2].id, indices: $$[$0-2].indices, valor: $$[$0], loc: this.yylloc }; 
break;
case 39:
 this.$ = { tipo: 'SI', condicion: $$[$0-4], sentencias: $$[$0-1], oSi: [], contrario: null, loc: this.yylloc }; 
break;
case 40:
 this.$ = { tipo: 'SI', condicion: $$[$0-10], sentencias: $$[$0-7], oSi: [], contrario: $$[$0-1], loc: this.yylloc }; 
break;
case 41:
 this.$ = { tipo: 'SI', condicion: $$[$0-5], sentencias: $$[$0-2], oSi: $$[$0], contrario: null, loc: this.yylloc }; 
break;
case 42:
 this.$ = { tipo: 'SI', condicion: $$[$0-11], sentencias: $$[$0-8], oSi: $$[$0-6], contrario: $$[$0-2], loc: this.yylloc }; 
break;
case 43:
 this.$ = $$[$0-8].concat([{ condicion: $$[$0-4], sentencias: $$[$0-1], loc: this.yylloc }]); 
break;
case 44:
 this.$ = [{ condicion: $$[$0-4], sentencias: $$[$0-1], loc: this.yylloc }]; 
break;
case 45: case 46:
 this.$ = { tipo: 'PARA', inicio: $$[$0-8], condicion: $$[$0-6], actualizacion: $$[$0-4], sentencias: $$[$0-1], loc: this.yylloc }; 
break;
case 47:
 this.$ = { tipo: 'MIENTRAS', condicion: $$[$0-4], sentencias: $$[$0-1], loc: this.yylloc }; 
break;
case 48:
 this.$ = { tipo: 'HACER_HASTA_QUE', sentencias: $$[$0-6], condicion: $$[$0-2], loc: this.yylloc }; 
break;
case 49:
 this.$ = { tipo: 'INCREMENTO', id: $$[$0-2], loc: this.yylloc }; 
break;
case 50:
 this.$ = { tipo: 'DECREMENTO', id: $$[$0-2], loc: this.yylloc }; 
break;
case 51:
 this.$ = { tipo: 'DEF_PROCEDIMIENTO', id: $$[$0-5], sentencias: $$[$0-1], parametros: [], loc: this.yylloc }; 
break;
case 52:
 this.$ = { tipo: 'DEF_PROCEDIMIENTO', id: $$[$0-6], sentencias: $$[$0-1], parametros: $$[$0-4], loc: this.yylloc }; 
break;
case 53:
 this.$ = { tipo: 'DEF_FUNCION', id: $$[$0-5], tipoRetorno: $$[$0-6], sentencias: $$[$0-1], parametros: [], loc: this.yylloc }; 
break;
case 54:
 this.$ = { tipo: 'DEF_FUNCION', id: $$[$0-6], tipoRetorno: $$[$0-7], sentencias: $$[$0-1], parametros: $$[$0-4], loc: this.yylloc }; 
break;
case 57:
 this.$ = { tipo: 'PARAMETRO', id: $$[$0], tipoDato: $$[$0-1], loc: this.yylloc }; 
break;
case 58:
 this.$ = { tipo: 'PARAMETRO', id: $$[$0-2], tipoDato: $$[$0-3], valor: $$[$0], loc: this.yylloc }; 
break;
case 59:
 this.$ = { tipo: 'DECLARACION_VECTOR1', id: $$[$0-6], tipoDato: $$[$0-9], tama√±o: $$[$0-1], dimensiones: 1, loc: this.yylloc }; 
break;
case 60:
 this.$ = { tipo: 'DECLARACION_VECTOR1', id: $$[$0-8], tipoDato: $$[$0-14], tama√±o1: $$[$0-4], tama√±o2: $$[$0-1], dimensiones: 2, loc: this.yylloc }; 
break;
case 61:
 this.$ = { tipo: 'DECLARACION_VECTOR2', id: $$[$0-4], tipoDato: $$[$0-7], valores: $$[$0-1], dimensiones: 1, loc: this.yylloc }; 
break;
case 62:
 this.$ = { tipo: 'DECLARACION_VECTOR2', id: $$[$0-3], tipoDato: $$[$0-9], valores: $$[$0-1], dimensiones: 2, loc: this.yylloc }; 
break;
case 63:
 this.$ = $$[$0-4].concat([$$[$0-1]]); 
break;
case 64:
 this.$ = [$$[$0-1]]; 
break;
case 65:
 this.$ = { tipo: 'ACCESO_VECTOR', id: $$[$0-3], indices: [$$[$0-1]], loc: this.yylloc }; 
break;
case 66:
 this.$ = { tipo: 'ACCESO_VECTOR', id: $$[$0-6], indices: [$$[$0-4], $$[$0-1]], loc: this.yylloc }; 
break;
case 67:
 this.$ = { tipo: 'DEF_OBJETO', id: $$[$0-3], atributos: $$[$0-1], loc: this.yylloc }; 
break;
case 68:
 this.$ = $$[$0-1].concat([$$[$0]]); 
break;
case 70:
 this.$ = { id: $$[$0-1], tipo: $$[$0], loc: this.yylloc }; 
break;
case 71:
 this.$ = { tipo: 'DEF_METODO_OBJETO', objeto: $$[$0-8], id: $$[$0-5], parametros: [], sentencias: $$[$0-1], loc: this.yylloc }; 
break;
case 72:
 this.$ = { tipo: 'DEF_METODO_OBJETO', objeto: $$[$0-9], id: $$[$0-6], parametros: $$[$0-4], sentencias: $$[$0-1], loc: this.yylloc }; 
break;
case 73:
 this.$ = { tipo: 'INGRESAR_OBJETO', id: $$[$0-5], tipoObjeto: $$[$0-3], valores: $$[$0-1], loc: this.yylloc }; 
break;
case 74:
 this.$ = { tipo: 'ACCESO_ATRIBUTO', objeto: $$[$0-2], atributo: $$[$0], loc: this.yylloc }; 
break;
case 76:
 this.$ = { tipo: 'TERNARIO', condicion: $$[$0-4], verdadero: $$[$0-2], falso: $$[$0], loc: this.yylloc }; 
break;
case 78:
 this.$ = { tipo: 'OR', izquierda: $$[$0-2], derecha: $$[$0], loc: this.yylloc }; 
break;
case 80:
 this.$ = { tipo: 'AND', izquierda: $$[$0-2], derecha: $$[$0], loc: this.yylloc }; 
break;
case 82:
 this.$ = { tipo: 'IGUALDAD', izquierda: $$[$0-2], derecha: $$[$0], loc: this.yylloc }; 
break;
case 83:
 this.$ = { tipo: 'DESIGUALDAD', izquierda: $$[$0-2], derecha: $$[$0], loc: this.yylloc }; 
break;
case 84:
 this.$ = { tipo: 'MENOR', izquierda: $$[$0-2], derecha: $$[$0], loc: this.yylloc }; 
break;
case 85:
 this.$ = { tipo: 'MENOR_IGUAL', izquierda: $$[$0-2], derecha: $$[$0], loc: this.yylloc }; 
break;
case 86:
 this.$ = { tipo: 'MAYOR', izquierda: $$[$0-2], derecha: $$[$0], loc: this.yylloc }; 
break;
case 87:
 this.$ = { tipo: 'MAYOR_IGUAL', izquierda: $$[$0-2], derecha: $$[$0], loc: this.yylloc }; 
break;
case 89:
 this.$ = { tipo: 'SUMA', izquierda: $$[$0-2], derecha: $$[$0], loc: this.yylloc }; 
break;
case 90:
 this.$ = { tipo: 'RESTA', izquierda: $$[$0-2], derecha: $$[$0], loc: this.yylloc }; 
break;
case 92:
 this.$ = { tipo: 'MULTIPLICACION', izquierda: $$[$0-2], derecha: $$[$0], loc: this.yylloc }; 
break;
case 93:
 this.$ = { tipo: 'DIVISION', izquierda: $$[$0-2], derecha: $$[$0], loc: this.yylloc }; 
break;
case 94:
 this.$ = { tipo: 'MODULO', izquierda: $$[$0-2], derecha: $$[$0], loc: this.yylloc }; 
break;
case 96:
 this.$ = { tipo: 'POTENCIA', izquierda: $$[$0-2], derecha: $$[$0], loc: this.yylloc }; 
break;
case 98:
 this.$ = { tipo: 'NEGACION_UNARIA', expresion: $$[$0], loc: this.yylloc }; 
break;
case 99:
 this.$ = { tipo: 'NOT', expresion: $$[$0], loc: this.yylloc }; 
break;
case 101:
 this.$ = { tipo: 'NUMERO', valor: Number($$[$0]), loc: this.yylloc }; 
break;
case 102:
 this.$ = { tipo: 'ID', nombre: $$[$0], loc: this.yylloc }; 
break;
case 103:
 this.$ = { tipo: 'CADENA', valor: $$[$0].slice(1, -1), loc: this.yylloc }; 
break;
case 104:
 this.$ = { tipo: 'CARACTER', valor: $$[$0].slice(1, -1), loc: this.yylloc }; 
break;
case 105:
 this.$ = { tipo: 'BOOLEANO', valor: true, loc: this.yylloc }; 
break;
case 106:
 this.$ = { tipo: 'BOOLEANO', valor: false, loc: this.yylloc }; 
break;
case 109:
 this.$ = { tipo: 'TOLOWER', expresion: $$[$0-1], loc: this.yylloc }; 
break;
case 110:
 this.$ = { tipo: 'TOUPPER', expresion: $$[$0-1], loc: this.yylloc }; 
break;
case 111:
 this.$ = { tipo: 'CASTEO', tipoDato: $$[$0-2], expresion: $$[$0], loc: this.yylloc }; 
break;
case 113:
 this.$ = 'entero'; 
break;
case 114:
 this.$ = 'decimal'; 
break;
case 115:
 this.$ = 'cadena'; 
break;
case 116:
 this.$ = 'booleano'; 
break;
case 117:
 this.$ = 'caracter'; 
break;
}
},
table: [o([5,9,10,13,20,21,31,32,33,34,43,51,52,53,58,60,66,103,104,105,106,107],$V0,{3:1,4:2}),{1:[3]},{5:[1,3],6:4,7:5,8:6,9:$V1,10:$V2,11:7,12:8,13:$V3,16:10,17:11,18:12,19:13,20:$V4,21:$V5,25:28,26:15,27:16,28:17,29:18,30:19,31:$V6,32:$V7,33:$V8,34:$V9,36:26,41:29,42:30,43:$Va,51:$Vb,52:$Vc,53:$Vd,58:$Ve,60:$Vf,66:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl},{1:[2,1]},o($Vm,[2,2]),{8:43,9:$V1,10:$V2},o($Vm,[2,5]),o($Vn,[2,8]),o($Vn,[2,9]),{14:44,15:[1,45],21:$Vo,22:$Vp,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},o($Vn,[2,12]),o($Vn,[2,13]),o($Vn,[2,14]),o($Vn,[2,15]),{21:[1,68],25:69},o($Vn,[2,20]),o($Vn,[2,21]),o($Vn,[2,22]),o($Vn,[2,23]),o($Vn,[2,24]),o($Vn,[2,25]),o($Vn,[2,26]),o($Vn,[2,27],{72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,95:56,41:63,25:64,14:70,21:$Vo,22:$Vp,57:$Vq,94:$Vr,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy}),o($Vm,[2,6]),o($Vm,[2,7]),{21:$Vz,66:[1,72]},{21:$VA,62:[1,74]},{38:$VB,40:$VC,56:$VD,57:$VE,62:$VF,69:[1,77],71:$VG},{38:[1,82]},{38:[1,83]},o($VH,[2,38]),{22:[1,84]},{22:[1,85]},{22:[1,86]},{44:[1,87]},{21:[1,88]},{36:89,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl},{21:[1,90]},o($VI,[2,113]),o($VI,[2,114]),o($VI,[2,115]),o($VI,[2,116]),o($VI,[2,117]),o($Vm,[2,4]),o($Vn,[2,10]),{14:91,21:$Vo,22:$Vp,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},o($VJ,[2,75]),o($VJ,[2,77],{74:[1,92],76:[1,93]}),o($VK,[2,79],{78:$VL}),o($VM,[2,81],{80:$VN,82:$VO,83:$VP,84:$VQ,85:$VR,86:$VS}),o($VT,[2,88],{56:$VU,57:$VV}),o($VW,[2,91],{88:$VX,90:$VY,91:$VZ}),o($V_,[2,95]),o($V_,[2,97],{93:[1,106]}),{21:$Vo,22:$Vp,25:64,41:63,57:$Vq,92:107,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{21:$Vo,22:$Vp,25:64,41:63,57:$Vq,92:108,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},o($V$,[2,100]),o($V$,[2,101]),o($V$,[2,102],{62:$VF,71:$VG}),o($V$,[2,103]),o($V$,[2,104]),o($V$,[2,105]),o($V$,[2,106]),o($V$,[2,107]),o($V$,[2,108]),{22:[1,109]},{22:[1,110]},{14:112,21:$Vo,22:$Vp,25:64,36:111,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl},{22:[1,113],71:$VG},{22:[1,114]},o($Vn,[2,28]),{35:[1,115]},{21:[1,116]},{37:[1,117],38:[1,118]},{63:[1,119]},{14:120,21:$Vo,22:$Vp,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{14:121,21:$Vo,22:$Vp,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{70:[1,122]},{21:[1,123]},{14:124,21:$Vo,22:$Vp,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{56:[1,125]},{57:[1,126]},{14:127,21:$Vo,22:$Vp,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{14:128,21:$Vo,22:$Vp,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{14:129,21:$Vo,22:$Vp,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{11:130,12:131,21:$V01,25:28,34:[1,132],36:133,41:29,42:30,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl},{14:135,21:$Vo,22:$Vp,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},o($V11,$V0,{4:136}),{22:[1,137]},{21:[1,138]},{22:[1,139]},o($Vn,[2,11]),{14:140,21:$Vo,22:$Vp,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{21:$Vo,22:$Vp,25:64,41:63,57:$Vq,77:141,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{21:$Vo,22:$Vp,25:64,41:63,57:$Vq,79:142,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{21:$Vo,22:$Vp,25:64,41:63,57:$Vq,81:143,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{21:$Vo,22:$Vp,25:64,41:63,57:$Vq,81:144,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{21:$Vo,22:$Vp,25:64,41:63,57:$Vq,81:145,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{21:$Vo,22:$Vp,25:64,41:63,57:$Vq,81:146,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{21:$Vo,22:$Vp,25:64,41:63,57:$Vq,81:147,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{21:$Vo,22:$Vp,25:64,41:63,57:$Vq,81:148,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{21:$Vo,22:$Vp,25:64,41:63,57:$Vq,87:149,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{21:$Vo,22:$Vp,25:64,41:63,57:$Vq,87:150,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{21:$Vo,22:$Vp,25:64,41:63,57:$Vq,89:151,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{21:$Vo,22:$Vp,25:64,41:63,57:$Vq,89:152,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{21:$Vo,22:$Vp,25:64,41:63,57:$Vq,89:153,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{21:$Vo,22:$Vp,25:64,41:63,57:$Vq,89:154,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},o($V$,[2,98]),o($V$,[2,99]),{14:155,21:$Vo,22:$Vp,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{14:156,21:$Vo,22:$Vp,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{23:[1,157]},{23:[1,158]},{14:161,21:$Vo,22:$Vp,23:[1,159],24:160,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{14:161,21:$Vo,22:$Vp,23:[1,162],24:163,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{36:164,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl},{40:[1,165]},{14:166,21:$Vo,22:$Vp,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{14:167,21:$Vo,22:$Vp,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{21:[1,168],62:[1,169]},o($VH,[2,34]),o($VH,[2,35]),{21:[1,170]},o([9,10,22,23,38,39,56,57,63,74,75,76,78,80,82,83,84,85,86,88,90,91,93],[2,74]),{63:[1,171]},o($VH,[2,49]),o($VH,[2,50]),o($VH,[2,36]),o($VH,[2,37]),{23:[1,172]},{10:[1,173]},{10:[1,174]},{21:$Vz},{21:$VA},{38:$VB,40:$VC,56:$VD,57:$VE,62:$VF,71:$VG},{23:[1,175]},{6:4,7:5,8:6,9:$V1,10:$V2,11:7,12:8,13:$V3,16:10,17:11,18:12,19:13,20:$V4,21:$V5,25:28,26:15,27:16,28:17,29:18,30:19,31:$V6,32:$V7,33:$V8,34:$V9,36:26,41:29,42:30,43:$Va,45:[1,176],51:$Vb,52:$Vc,53:$Vd,58:$Ve,60:$Vf,66:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl},{23:[1,177],36:180,59:178,61:179,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl},{22:[1,181]},{21:$V21,67:182,68:183},{75:[1,185]},o($VK,[2,78],{78:$VL}),o($VM,[2,80],{80:$VN,82:$VO,83:$VP,84:$VQ,85:$VR,86:$VS}),o($VT,[2,82],{56:$VU,57:$VV}),o($VT,[2,83],{56:$VU,57:$VV}),o($VT,[2,84],{56:$VU,57:$VV}),o($VT,[2,85],{56:$VU,57:$VV}),o($VT,[2,86],{56:$VU,57:$VV}),o($VT,[2,87],{56:$VU,57:$VV}),o($VW,[2,89],{88:$VX,90:$VY,91:$VZ}),o($VW,[2,90],{88:$VX,90:$VY,91:$VZ}),o($V_,[2,92]),o($V_,[2,93]),o($V_,[2,94]),o($V_,[2,96]),{23:[1,186]},{23:[1,187]},{21:$Vo,22:$Vp,25:64,41:63,57:$Vq,92:188,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},o($V$,[2,112]),o($Vn,[2,16]),{23:[1,189],39:$V31},o($V41,[2,33]),o($Vn,[2,18]),{23:[1,191],39:$V31},{37:[1,192]},{21:[1,193]},o($Vn,[2,30]),o($Vn,[2,31]),{38:[1,194]},{63:[1,195]},{22:[1,196]},o($V51,[2,65],{62:[1,197]}),{44:[1,198]},{14:199,21:$Vo,22:$Vp,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{14:200,21:$Vo,22:$Vp,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{44:[1,201]},{54:[1,202]},{44:[1,203]},{23:[1,204],39:$V61},o($V71,[2,56]),{21:[1,206]},{23:[1,207],36:180,59:208,61:179,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl},{21:$V21,23:[1,209],68:210},o($V81,[2,69]),{36:211,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl},{14:212,21:$Vo,22:$Vp,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},o($V$,[2,109]),o($V$,[2,110]),o($V$,[2,111]),o($Vn,[2,17]),{14:213,21:$Vo,22:$Vp,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},o($Vn,[2,19]),{14:214,21:$Vo,22:$Vp,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{22:[1,215]},{62:[1,217],64:[1,216]},{21:[1,218]},{23:[1,219],36:180,59:220,61:179,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl},{14:221,21:$Vo,22:$Vp,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},o($V11,$V0,{4:222}),{10:[1,223]},{10:[1,224]},o($V11,$V0,{4:225}),{55:[1,226]},o($V11,$V0,{4:227}),{44:[1,228]},{36:180,61:229,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl},o($V71,[2,57],{38:[1,230]}),{44:[1,231]},{23:[1,232],39:$V61},o($Vn,[2,67]),o($V81,[2,68]),o($V81,[2,70]),o($VJ,[2,76]),o($V41,[2,32]),o($Vn,[2,29]),{14:161,21:$Vo,22:$Vp,24:233,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{36:234,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl},{14:161,21:$Vo,22:$Vp,24:235,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{38:[1,236]},{44:[1,237]},{23:[1,238],39:$V61},{63:[1,239]},{6:4,7:5,8:6,9:$V1,10:$V2,11:7,12:8,13:$V3,16:10,17:11,18:12,19:13,20:$V4,21:$V5,25:28,26:15,27:16,28:17,29:18,30:19,31:$V6,32:$V7,33:$V8,34:$V9,36:26,41:29,42:30,43:$Va,45:[1,240],51:$Vb,52:$Vc,53:$Vd,58:$Ve,60:$Vf,66:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl},{12:241,21:$V01,25:28,41:29,42:30},{12:242,21:$V01,25:28,41:29,42:30},{6:4,7:5,8:6,9:$V1,10:$V2,11:7,12:8,13:$V3,16:10,17:11,18:12,19:13,20:$V4,21:$V5,25:28,26:15,27:16,28:17,29:18,30:19,31:$V6,32:$V7,33:$V8,34:$V9,36:26,41:29,42:30,43:$Va,45:[1,243],51:$Vb,52:$Vc,53:$Vd,58:$Ve,60:$Vf,66:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl},{22:[1,244]},{6:4,7:5,8:6,9:$V1,10:$V2,11:7,12:8,13:$V3,16:10,17:11,18:12,19:13,20:$V4,21:$V5,25:28,26:15,27:16,28:17,29:18,30:19,31:$V6,32:$V7,33:$V8,34:$V9,36:26,41:29,42:30,43:$Va,45:[1,245],51:$Vb,52:$Vc,53:$Vd,58:$Ve,60:$Vf,66:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl},o($V11,$V0,{4:246}),o($V71,[2,55]),{14:247,21:$Vo,22:$Vp,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},o($V11,$V0,{4:248}),{44:[1,249]},{23:[1,250],39:$V31},{62:[1,251]},{39:$V31,63:[1,252]},{62:[1,254],64:[1,253]},o($V11,$V0,{4:255}),{44:[1,256]},o($V51,[2,66]),o($Vn,[2,39],{49:258,46:[1,257],50:[1,259]}),{23:[1,260]},{23:[1,261]},o($Vn,[2,47]),{14:262,21:$Vo,22:$Vp,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},o($Vn,[2,51]),{6:4,7:5,8:6,9:$V1,10:$V2,11:7,12:8,13:$V3,16:10,17:11,18:12,19:13,20:$V4,21:$V5,25:28,26:15,27:16,28:17,29:18,30:19,31:$V6,32:$V7,33:$V8,34:$V9,36:26,41:29,42:30,43:$Va,45:[1,263],51:$Vb,52:$Vc,53:$Vd,58:$Ve,60:$Vf,66:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl},o($V71,[2,58]),{6:4,7:5,8:6,9:$V1,10:$V2,11:7,12:8,13:$V3,16:10,17:11,18:12,19:13,20:$V4,21:$V5,25:28,26:15,27:16,28:17,29:18,30:19,31:$V6,32:$V7,33:$V8,34:$V9,36:26,41:29,42:30,43:$Va,45:[1,264],51:$Vb,52:$Vc,53:$Vd,58:$Ve,60:$Vf,66:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl},o($V11,$V0,{4:265}),o($Vn,[2,73]),{14:266,21:$Vo,22:$Vp,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},o($Vn,[2,61]),{36:267,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl},{62:[1,269],65:268},{6:4,7:5,8:6,9:$V1,10:$V2,11:7,12:8,13:$V3,16:10,17:11,18:12,19:13,20:$V4,21:$V5,25:28,26:15,27:16,28:17,29:18,30:19,31:$V6,32:$V7,33:$V8,34:$V9,36:26,41:29,42:30,43:$Va,45:[1,270],51:$Vb,52:$Vc,53:$Vd,58:$Ve,60:$Vf,66:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl},o($V11,$V0,{4:271}),{47:[1,272]},o($Vn,[2,41],{46:[1,273],50:[1,274]}),{43:[1,275]},{44:[1,276]},{44:[1,277]},{23:[1,278]},o($Vn,[2,52]),o($Vn,[2,53]),{6:4,7:5,8:6,9:$V1,10:$V2,11:7,12:8,13:$V3,16:10,17:11,18:12,19:13,20:$V4,21:$V5,25:28,26:15,27:16,28:17,29:18,30:19,31:$V6,32:$V7,33:$V8,34:$V9,36:26,41:29,42:30,43:$Va,45:[1,279],51:$Vb,52:$Vc,53:$Vd,58:$Ve,60:$Vf,66:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl},{63:[1,280]},{62:[1,281]},{39:[1,283],63:[1,282]},{14:161,21:$Vo,22:$Vp,24:284,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},o($Vn,[2,71]),{6:4,7:5,8:6,9:$V1,10:$V2,11:7,12:8,13:$V3,16:10,17:11,18:12,19:13,20:$V4,21:$V5,25:28,26:15,27:16,28:17,29:18,30:19,31:$V6,32:$V7,33:$V8,34:$V9,36:26,41:29,42:30,43:$Va,45:[1,285],51:$Vb,52:$Vc,53:$Vd,58:$Ve,60:$Vf,66:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl},{48:[1,286]},{47:[1,287]},{43:[1,288]},{22:[1,289]},o($V11,$V0,{4:290}),o($V11,$V0,{4:291}),o($Vn,[2,48]),o($Vn,[2,54]),o($Vn,[2,59]),{14:292,21:$Vo,22:$Vp,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},o($Vn,[2,62]),{62:[1,293]},{39:$V31,63:[1,294]},o($Vn,[2,72]),{44:[1,295]},{48:[1,296]},{22:[1,297]},{14:298,21:$Vo,22:$Vp,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{6:4,7:5,8:6,9:$V1,10:$V2,11:7,12:8,13:$V3,16:10,17:11,18:12,19:13,20:$V4,21:$V5,25:28,26:15,27:16,28:17,29:18,30:19,31:$V6,32:$V7,33:$V8,34:$V9,36:26,41:29,42:30,43:$Va,45:[1,299],51:$Vb,52:$Vc,53:$Vd,58:$Ve,60:$Vf,66:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl},{6:4,7:5,8:6,9:$V1,10:$V2,11:7,12:8,13:$V3,16:10,17:11,18:12,19:13,20:$V4,21:$V5,25:28,26:15,27:16,28:17,29:18,30:19,31:$V6,32:$V7,33:$V8,34:$V9,36:26,41:29,42:30,43:$Va,45:[1,300],51:$Vb,52:$Vc,53:$Vd,58:$Ve,60:$Vf,66:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl},{63:[1,301]},{14:161,21:$Vo,22:$Vp,24:302,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},o($V91,[2,64]),o($V11,$V0,{4:303}),{44:[1,304]},{14:305,21:$Vo,22:$Vp,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},{23:[1,306]},o($Vn,[2,45]),o($Vn,[2,46]),{62:[1,307]},{39:$V31,63:[1,308]},{6:4,7:5,8:6,9:$V1,10:$V2,11:7,12:8,13:$V3,16:10,17:11,18:12,19:13,20:$V4,21:$V5,25:28,26:15,27:16,28:17,29:18,30:19,31:$V6,32:$V7,33:$V8,34:$V9,36:26,41:29,42:30,43:$Va,45:[1,309],51:$Vb,52:$Vc,53:$Vd,58:$Ve,60:$Vf,66:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl},o($V11,$V0,{4:310}),{23:[1,311]},{44:[1,312]},{14:313,21:$Vo,22:$Vp,25:64,41:63,57:$Vq,72:46,73:47,77:48,79:49,81:50,87:51,89:52,92:53,94:$Vr,95:56,96:$Vs,97:$Vt,98:$Vu,99:$Vv,100:$Vw,101:$Vx,102:$Vy},o($V91,[2,63]),o($Vn,[2,40]),{6:4,7:5,8:6,9:$V1,10:$V2,11:7,12:8,13:$V3,16:10,17:11,18:12,19:13,20:$V4,21:$V5,25:28,26:15,27:16,28:17,29:18,30:19,31:$V6,32:$V7,33:$V8,34:$V9,36:26,41:29,42:30,43:$Va,45:[1,314],51:$Vb,52:$Vc,53:$Vd,58:$Ve,60:$Vf,66:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl},{44:[1,315]},o($V11,$V0,{4:316}),{63:[1,317]},o($Vn,[2,42]),o($V11,$V0,{4:318}),{6:4,7:5,8:6,9:$V1,10:$V2,11:7,12:8,13:$V3,16:10,17:11,18:12,19:13,20:$V4,21:$V5,25:28,26:15,27:16,28:17,29:18,30:19,31:$V6,32:$V7,33:$V8,34:$V9,36:26,41:29,42:30,43:$Va,45:[1,319],51:$Vb,52:$Vc,53:$Vd,58:$Ve,60:$Vf,66:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl},o($Vn,[2,60]),{6:4,7:5,8:6,9:$V1,10:$V2,11:7,12:8,13:$V3,16:10,17:11,18:12,19:13,20:$V4,21:$V5,25:28,26:15,27:16,28:17,29:18,30:19,31:$V6,32:$V7,33:$V8,34:$V9,36:26,41:29,42:30,43:$Va,45:[1,320],51:$Vb,52:$Vc,53:$Vd,58:$Ve,60:$Vf,66:$Vg,103:$Vh,104:$Vi,105:$Vj,106:$Vk,107:$Vl},o($Va1,[2,44]),o($Va1,[2,43])],
defaultActions: {3:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip horizontal whitespace */
break;
case 1:return 34;
break;
case 2:return 35;
break;
case 3:return 37;
break;
case 4:return 103;
break;
case 5:return 104;
break;
case 6:return 107;
break;
case 7:return 105;
break;
case 8:return 106;
break;
case 9:return 13;
break;
case 10:return 15;
break;
case 11:return 99;
break;
case 12:return 100;
break;
case 13:return 43;
break;
case 14:return 50;
break;
case 15:return 46;
break;
case 16:return 47;
break;
case 17:return 48;
break;
case 18:return 52;
break;
case 19:return 51;
break;
case 20:return 53;
break;
case 21:return 54;
break;
case 22:return 55;
break;
case 23:return 58;
break;
case 24:return 60;
break;
case 25:return 33;
break;
case 26:return 20;
break;
case 27:return 64;
break;
case 28:return 66;
break;
case 29:return 69;
break;
case 30:return 70;
break;
case 31:return 31;
break;
case 32:return 32;
break;
case 33:return 101;
break;
case 34:return 102;
break;
case 35:return 96;
break;
case 36:return 97;
break;
case 37:return 98;
break;
case 38:return 21;
break;
case 39:return 40;
break;
case 40:return 56;
break;
case 41:return 57;
break;
case 42:return 88;
break;
case 43:return 90;
break;
case 44:return 93;
break;
case 45:return 91;
break;
case 46:return 80;
break;
case 47:return 82;
break;
case 48:return 83;
break;
case 49:return 84;
break;
case 50:return 85;
break;
case 51:return 86;
break;
case 52:return 76;
break;
case 53:return 78;
break;
case 54:return 94;
break;
case 55:return 38;
break;
case 56:return 71;
break;
case 57:return 74;
break;
case 58:return 75;
break;
case 59:return 22;
break;
case 60:return 23;
break;
case 61:return 62;
break;
case 62:return 63;
break;
case 63:return 44;
break;
case 64:return 45;
break;
case 65:return 39;
break;
case 66:return 10;
break;
case 67:/* skip comentarios de l√≠nea */
break;
case 68:/* skip comentarios multil√≠nea */
break;
case 69:return 9;
break;
case 70:return 5;
break;
case 71:
    console.error(`Car√°cter no reconocido: '${yy_.yytext}'`);
    return 'INVALIDO';

break;
}
},
rules: [/^(?:[ \t\r]+)/,/^(?:ingresar\b)/,/^(?:como\b)/,/^(?:con valor\b)/,/^(?:entero\b)/,/^(?:decimal\b)/,/^(?:caracter\b)/,/^(?:cadena\b)/,/^(?:booleano\b)/,/^(?:imprimir\b)/,/^(?:nl\b)/,/^(?:verdadero\b)/,/^(?:falso\b)/,/^(?:si\b)/,/^(?:o\b)/,/^(?:de\b)/,/^(?:lo\b)/,/^(?:contrario\b)/,/^(?:mientras\b)/,/^(?:para\b)/,/^(?:hacer\b)/,/^(?:hasta\b)/,/^(?:que\b)/,/^(?:procedimiento\b)/,/^(?:funcion\b)/,/^(?:retornar\b)/,/^(?:ejecutar\b)/,/^(?:vector\b)/,/^(?:objeto\b)/,/^(?:con\b)/,/^(?:metodo\b)/,/^(?:detener\b)/,/^(?:continuar\b)/,/^(?:tolower\b)/,/^(?:toupper\b)/,/^(?:[0-9]+(\.[0-9]+)?)/,/^(?:"([^"\\]|\\.)*")/,/^(?:'([^'\\]|\\.)*')/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:->)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:==)/,/^(?:!=)/,/^(?:<)/,/^(?:<=)/,/^(?:>)/,/^(?:>=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:=)/,/^(?:\.)/,/^(?:\?)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:;)/,/^(?:\/\/[^\n]*)/,/^(?:\/\*([^*]|\*+[^/*])*\*+\/)/,/^(?:\n)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}